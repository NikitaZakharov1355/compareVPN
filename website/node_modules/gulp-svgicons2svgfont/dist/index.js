import { SVGIcons2SVGFontStream, SVGIconsDirStream, getMetadataService, } from 'svgicons2svgfont';
import { glob } from 'glob';
import PluginError from 'plugin-error';
import { Readable } from 'node:stream';
import Vinyl from 'vinyl';
const PLUGIN_NAME = 'gulp-svgicons2svgfont';
export const svgicons2svgfont = (globs, options) => {
    // const inputStream = new Stream.Transform({ objectMode: true })
    const resultStream = new Readable({ objectMode: true });
    options.startUnicode = options.startUnicode || 0xea01;
    options.prependUnicode = !!options.prependUnicode;
    options.fileName = options.fileName || options.fontName;
    if (options.appendUnicode) {
        throw new PluginError('svgicons2svgfont', 'The "appendUnicode" option was renamed to "prependUnicode".' +
            ' See https://github.com/nfroidure/gulp-svgicons2svgfont/issues/33');
    }
    if (!options.fontName) {
        throw new PluginError('svgicons2svgfont', 'Missing options.fontName');
    }
    // Emit event containing codepoint mapping
    options.callback = function (glyphs) {
        resultStream.emit('glyphs', glyphs.map((glyph) => {
            const finalGlyph = {
                name: glyph.name,
                unicode: glyph.unicode,
            };
            if (glyph.color) {
                finalGlyph.color = glyph.color;
            }
            return finalGlyph;
        }));
    };
    options.metadataProvider =
        options.metadataProvider ||
            getMetadataService({
                startUnicode: options.startUnicode,
                prependUnicode: options.prependUnicode,
            });
    const globsArray = 'string' == typeof globs ? [globs] : globs;
    const fontStream = new SVGIconsDirStream(globsArray
        .map((g) => glob.sync(g))
        .reduce((acc, item) => acc.concat(item), []), options)
        .on('error', (err) => {
        resultStream.emit('error', new PluginError(PLUGIN_NAME, err));
    })
        .pipe(new SVGIcons2SVGFontStream(options).on('error', (err) => {
        resultStream.emit('error', new PluginError(PLUGIN_NAME, err));
    }));
    const fontVinyl = new Vinyl({
        contents: fontStream,
        path: `${options.fileName}.svg`,
    });
    resultStream.push(fontVinyl);
    resultStream.push(null);
    return resultStream;
};
//# sourceMappingURL=index.js.map